{"version":3,"sources":["../node_modules/@babel/runtime/helpers/esm/slicedToArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArrayLimit.js","../node_modules/@babel/runtime/helpers/esm/nonIterableRest.js","Comps/ContactForm/ContactForm.js","Comps/ContactList/ContactList.js","views/ContactsView.js"],"names":["_slicedToArray","arr","i","Array","isArray","Symbol","iterator","Object","_arr","_n","_d","_e","undefined","_s","_i","next","done","push","value","length","err","unsupportedIterableToArray","TypeError","initState","name","number","ContactForm","useState","form","setForm","dispatch","useDispatch","inptHndlr","e","target","onSubmit","preventDefault","contactsOperations","addContact","type","pattern","title","required","onChange","ContactList","contacts","useSelector","contactsSelectors","getVisibleContacts","map","contact","id","ContactsView","params","useEffect","fetchContacts"],"mappings":"6LAIe,SAASA,EAAeC,EAAKC,GAC1C,OCLa,SAAyBD,GACtC,GAAIE,MAAMC,QAAQH,GAAM,OAAOA,EDIxB,CAAeA,IELT,SAA+BA,EAAKC,GACjD,GAAsB,qBAAXG,QAA4BA,OAAOC,YAAYC,OAAON,GAAjE,CACA,IAAIO,EAAO,GACPC,GAAK,EACLC,GAAK,EACLC,OAAKC,EAET,IACE,IAAK,IAAiCC,EAA7BC,EAAKb,EAAII,OAAOC,cAAmBG,GAAMI,EAAKC,EAAGC,QAAQC,QAChER,EAAKS,KAAKJ,EAAGK,QAEThB,GAAKM,EAAKW,SAAWjB,GAH8CO,GAAK,IAK9E,MAAOW,GACPV,GAAK,EACLC,EAAKS,EACL,QACA,IACOX,GAAsB,MAAhBK,EAAW,QAAWA,EAAW,SAC5C,QACA,GAAIJ,EAAI,MAAMC,GAIlB,OAAOH,GFnBuB,CAAqBP,EAAKC,IAAM,OAAAmB,EAAA,GAA2BpB,EAAKC,IGLjF,WACb,MAAM,IAAIoB,UAAU,6IHIgF,K,wIIEhGC,EAAY,CAAEC,KAAM,GAAIC,OAAQ,IAEvB,SAASC,IACtB,MAAwBC,mBAASJ,GAAjC,mBAAOK,EAAP,KAAaC,EAAb,KACMC,EAAWC,cAGXC,EAAY,SAAAC,GAAC,OAAIJ,EAAQ,2BAAKD,GAAN,kBAAaK,EAAEC,OAAOV,KAAOS,EAAEC,OAAOhB,UAQpE,OACE,uBAAMiB,SAPa,SAAAF,GACnBA,EAAEG,iBACFN,EAASO,IAAmBC,WAAWV,IACvCC,EAAQN,IAIR,UACE,sCACA,uBACEgB,KAAK,OACLf,KAAK,OACLgB,QAAQ,yHACRC,MAAM,kcACNC,UAAQ,EACRxB,MAAOU,EAAKJ,KACZmB,SAAUX,IAGZ,wCACA,uBACEO,KAAK,MACLf,KAAK,SACLgB,QAAQ,yFACRC,MAAM,6iBACNC,UAAQ,EACRxB,MAAOU,EAAKH,OACZkB,SAAUX,IAEZ,uBACA,wBAAQO,KAAK,SAAb,4B,YC3BS,SAASK,IAEtB,IAAMC,EAAWC,YAAYC,IAAkBC,oBAa/C,OACE,mCAEGH,GACC,gCACE,6CAEA,6BACGA,EAASI,KAAI,SAAAC,GAAO,OACnB,6BACE,4BACE,iCACGA,EAAQ1B,KADX,KACmB0B,EAAQzB,OAAS,iBAH/ByB,EAAQC,cCxBhB,SAASC,EAAaC,GACnC,IAAMvB,EAAWC,cAQjB,OAFAuB,qBAAU,kBAAMxB,EAASO,IAAmBkB,mBAAkB,CAACzB,IAI7D,cADA,CACA,sBAUE,cAACJ,EAAD,IACA,cAACkB,EAAD","file":"static/js/3.674b01d8.chunk.js","sourcesContent":["import arrayWithHoles from \"@babel/runtime/helpers/esm/arrayWithHoles\";\nimport iterableToArrayLimit from \"@babel/runtime/helpers/esm/iterableToArrayLimit\";\nimport unsupportedIterableToArray from \"@babel/runtime/helpers/esm/unsupportedIterableToArray\";\nimport nonIterableRest from \"@babel/runtime/helpers/esm/nonIterableRest\";\nexport default function _slicedToArray(arr, i) {\n  return arrayWithHoles(arr) || iterableToArrayLimit(arr, i) || unsupportedIterableToArray(arr, i) || nonIterableRest();\n}","export default function _arrayWithHoles(arr) {\n  if (Array.isArray(arr)) return arr;\n}","export default function _iterableToArrayLimit(arr, i) {\n  if (typeof Symbol === \"undefined\" || !(Symbol.iterator in Object(arr))) return;\n  var _arr = [];\n  var _n = true;\n  var _d = false;\n  var _e = undefined;\n\n  try {\n    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n      _arr.push(_s.value);\n\n      if (i && _arr.length === i) break;\n    }\n  } catch (err) {\n    _d = true;\n    _e = err;\n  } finally {\n    try {\n      if (!_n && _i[\"return\"] != null) _i[\"return\"]();\n    } finally {\n      if (_d) throw _e;\n    }\n  }\n\n  return _arr;\n}","export default function _nonIterableRest() {\n  throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","import { useState } from \"react\"; // import { useCreateContactMutation } from \"../../redux/slices/contacts\";\nimport { useDispatch } from \"react-redux\";\nimport contactsOperations from \"../../redux/contacts/contacts-operations\";\n\n// console.log(contactsOperations.addContact);\n// contactsOperations.addContact(\"qqq\");\n\nconst initState = { name: \"\", number: \"\" };\n\nexport default function ContactForm() {\n  const [form, setForm] = useState(initState);\n  const dispatch = useDispatch();\n  // const [createContact] = useCreateContactMutation();\n\n  const inptHndlr = e => setForm({ ...form, [e.target.name]: e.target.value });\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    dispatch(contactsOperations.addContact(form));\n    setForm(initState);\n  };\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <h3>Name</h3>\n      <input\n        type=\"text\"\n        name=\"name\"\n        pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\n        title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\n        required\n        value={form.name}\n        onChange={inptHndlr}\n      />\n\n      <h3>Number</h3>\n      <input\n        type=\"tel\"\n        name=\"number\"\n        pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\n        title=\"Номер телефона должен состоять из цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\n        required\n        value={form.number}\n        onChange={inptHndlr}\n      />\n      <br></br>\n      <button type=\"submit\">Add contact</button>\n    </form>\n  );\n}\n","// import {\r\n//   useFetchContactsQuery,\r\n//   useDeleteContactMutation,\r\n// } from \"../../redux/slices/contacts\";\r\n\r\n// import { useSelector } from \"react-redux\";\r\n\r\n// const getFilterContacts = (contacts, filterQ) =>\r\n//   contacts.filter(({ name }) =>\r\n//     name.toLowerCase().includes(filterQ.toLowerCase())\r\n//   );\r\n\r\n// import Todo from '../Todo';\r\n\r\nimport { useSelector /*, useDispatch */ } from \"react-redux\";\r\nimport {\r\n  /* contactsOperations, */ contactsSelectors,\r\n} from \"../../redux/contacts\";\r\n\r\nexport default function ContactList() {\r\n  // const dispatch = useDispatch();\r\n  const contacts = useSelector(contactsSelectors.getVisibleContacts);\r\n  // const { data: contacts, isFetching } = useFetchContactsQuery();\r\n  // const [deleteContact, { isLoading: isDeleting }] = useDeleteContactMutation(); // console.log(data);\r\n\r\n  // const filter = useSelector(state => state.filter);\r\n\r\n  // console.log(\"state.filter: \", filter);\r\n  // let dBase = [];\r\n  // if (!isFetching) {\r\n  //   console.log(\"contacts: \"), contacts;\r\n  //   dBase = getFilterContacts(contacts, filter);\r\n  // }\r\n\r\n  return (\r\n    <>\r\n      {/* {isFetching && <p>Loading...</p>} */}\r\n      {contacts && (\r\n        <div>\r\n          <h3>ContactList</h3>\r\n\r\n          <ol>\r\n            {contacts.map(contact => (\r\n              <li key={contact.id}>\r\n                <p>\r\n                  <span>\r\n                    {contact.name}: {contact.number + \"  \"}\r\n                  </span>\r\n                  {/* <button onClick={() => deleteContact(contact.id)}>\r\n                    {isDeleting ? \"Deleting...\" : \"Delete\"}\r\n                  </button> */}\r\n                </p>\r\n              </li>\r\n            ))}\r\n          </ol>\r\n        </div>\r\n      )}\r\n    </>\r\n  );\r\n}\r\n","import { /*useState,*/ useEffect } from \"react\";\nimport { useDispatch /*, useSelector */ } from \"react-redux\";\n// import Container from '../components/Container';\nimport ContactForm from \"../Comps/ContactForm/ContactForm\";\nimport ContactList from \"../Comps/ContactList\";\n// import TodoEditor from '../components/TodoEditor';\n// import Filter from '../components/TodoFilter';\n// import Stats from '../components/Stats';\n// import Modal from '../components/Modal';\n// import IconButton from '../components/IconButton';\n// import { ReactComponent as AddIcon } from '../icons/add.svg';\nimport { contactsOperations /*, contactsSelectors */ } from \"../redux/contacts\";\n\n// const barStyles = {\n//   display: 'flex',\n//   alignItems: 'flex-end',\n//   marginBottom: 20,\n// };\n\nexport default function ContactsView(params) {\n  const dispatch = useDispatch();\n  // const isLoadingTodos = useSelector(todosSelectors.getLoading);\n\n  // const [isModalOpen, setIsModalOpen] = useState(false);\n  // const toggleModal = () => setIsModalOpen(state => !state);\n\n  useEffect(() => dispatch(contactsOperations.fetchContacts()), [dispatch]);\n\n  return (\n    // <Container>\n    <>\n      {/* <div style={barStyles}>\n        <Filter />\n        <Stats />\n        <IconButton onClick={toggleModal} aria-label=\"Добавить todo\">\n          <AddIcon width=\"40\" height=\"40\" fill=\"#fff\" />\n        </IconButton>\n\n        {isLoadingTodos && <h1>Загружаем...</h1>}\n      </div> */}\n      <ContactForm />\n      <ContactList />\n\n      {/* {isModalOpen && (\n        <Modal onClose={toggleModal}>\n          <TodoEditor onSave={toggleModal} />\n        </Modal>\n      )} */}\n    </>\n    // </Container>\n  );\n}\n"],"sourceRoot":""}